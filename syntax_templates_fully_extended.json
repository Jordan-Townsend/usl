{
  "mathematica": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "mat"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "vhdl": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "vhd"
    ],
    "example": "echo \"Hello World\""
  },
  "yacas": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "yac"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "python": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pyt"
    ],
    "example": "print(\"Hello World\")"
  },
  "erlang": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "erl"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "sed": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sed"
    ],
    "example": "echo \"Hello World\""
  },
  "pocolisp": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "poc"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "haxe": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "hax"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "icon": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "ico"
    ],
    "example": "print(\"Hello World\")"
  },
  "janet": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "jan"
    ],
    "example": "echo \"Hello World\""
  },
  "boo": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "boo"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "vala": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "val"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "tcl": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "tcl"
    ],
    "example": "echo \"Hello World\""
  },
  "fortran": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "for"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "typescript": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "typ"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "hack": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "hac"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "oberon": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "obe"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "rust": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "rus"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "pure": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pur"
    ],
    "example": "echo \"Hello World\""
  },
  "applescript": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "app"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "squirrel": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "squ"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "ruby": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "rub"
    ],
    "example": "print(\"Hello World\")"
  },
  "groovy": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "gro"
    ],
    "example": "echo \"Hello World\""
  },
  "zpl": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "zpl"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "ada": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "ada"
    ],
    "example": "print(\"Hello World\")"
  },
  "clist": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "cli"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "postscript": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pos"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "gml": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "gml"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "css": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "css"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "prolog": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pro"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "livecode": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "liv"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "verilog": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "ver"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "elena": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "ele"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "bliss": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "bli"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "maclisp": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "mac"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "snobol": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sno"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "jovial": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "jov"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "vbnet": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "vbn"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "xtend": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "xte"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "vbscript": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "vbs"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "myrddin": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "myr"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "rebol": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "reb"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "zimbu": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "zim"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "processing": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pro"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "php": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "php"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "pike": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pik"
    ],
    "example": "print(\"Hello World\")"
  },
  "nickle": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "nic"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "pop11": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pop"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "swift": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "swi"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "idl": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "idl"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "smalltalk": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sma"
    ],
    "example": "echo \"Hello World\""
  },
  "eiffel": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "eif"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "forth": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "for"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "zsh": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "zsh"
    ],
    "example": "echo \"Hello World\""
  },
  "nim": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "nim"
    ],
    "example": "print(\"Hello World\")"
  },
  "makefile": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "mak"
    ],
    "example": "echo \"Hello World\""
  },
  "javascript": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "jav"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "ceylon": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "cey"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "delphi": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "del"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "c": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "c"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "pascal": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pas"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "bash": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "bas"
    ],
    "example": "echo \"Hello World\""
  },
  "sather": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sat"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "xotcl": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "xot"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "html": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "htm"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "dart": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "dar"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "frege": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "fre"
    ],
    "example": "print(\"Hello World\")"
  },
  "scala": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sca"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "tex": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "tex"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "matlab": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "mat"
    ],
    "example": "print(\"Hello World\")"
  },
  "d": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "d"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "cpp": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "cpp"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "nial": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "nia"
    ],
    "example": "print(\"Hello World\")"
  },
  "ring": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "rin"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "mumps": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "mum"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "go": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "go"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "clojure": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "clo"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "powershell": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pow"
    ],
    "example": "echo \"Hello World\""
  },
  "elixir": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "eli"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "fsharp": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "fsh"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "opal": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "opa"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "julia": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "jul"
    ],
    "example": "print(\"Hello World\")"
  },
  "maxima": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "max"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "wren": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "wre"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "yorick": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "yor"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "logo": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "log"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "assembly": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "ass"
    ],
    "example": "print(\"Hello World\")"
  },
  "labview": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "lab"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "algol": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "alg"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "lua": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "lua"
    ],
    "example": "print(\"Hello World\")"
  },
  "simula": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sim"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "kotlin": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "kot"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "modula": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "mod"
    ],
    "example": "echo \"Hello World\""
  },
  "lily": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "lil"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "cobra": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "cob"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "scheme": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sch"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "sql": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\n-- SELECT {}",
      "assign": "-- Assigns a value to a variable\n-- LET {} = {}",
      "function": "-- Defines a reusable block of code or routine\n-- FUNC {}({}) BEGIN ... END;",
      "loop": "-- Iterates over a sequence or range\n-- use cursor/iterator",
      "if": "-- Performs conditional logic\n-- IF {} THEN {}",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sql"
    ],
    "example": "-- SELECT \"Hello World\""
  },
  "zig": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "zig"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "seed7": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "see"
    ],
    "example": "print(\"Hello World\")"
  },
  "csharp": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "csh"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "mirah": {
    "structure": {
      "print": "\\ Outputs text or value to console or output stream\n. \"{}\" print",
      "assign": "\\ Assigns a value to a variable\nvariable {} {} !",
      "function": "\\ Defines a reusable block of code or routine\n: {} ( n -- n )\n  {}\n;",
      "loop": "\\ Iterates over a sequence or range\n: {} BEGIN {} WHILE {} REPEAT ;",
      "if": "\\ Performs conditional logic\n{} IF {} THEN",
      "comment": "\\ Adds human-readable comments\n\\ {}",
      "return": "\\ Exits a function and optionally returns a value\nreturn {}",
      "import": "\\ Includes external libraries or modules\nimport {}",
      "switch": "\\ Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "\\ Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "\\ Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "\\ Adds human-readable comments\n\\ Exits the nearest enclosing loop\nbreak",
      "continue": "\\ Adds human-readable comments\n\\ Skips to the next iteration of a loop\ncontinue",
      "else": "\\ Adds human-readable comments\n\\ Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "\\ Adds human-readable comments\n\\ An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "\\ Adds human-readable comments\n\\ Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "\\ Adds human-readable comments\n\\ Raises an exception or error\nthrow new Error({})",
      "async": "\\ Adds human-readable comments\n\\ Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "\\ Adds human-readable comments\n\\ Pauses execution until a promise resolves\nawait {}",
      "yield": "\\ Adds human-readable comments\n\\ Pauses and returns from a generator\nyield {}",
      "operator": "\\ Adds human-readable comments\n\\ Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "\\ Adds human-readable comments\n\\ Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "\\ Adds human-readable comments\n\\ Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "mir"
    ],
    "example": ". \"\"Hello World\"\" print"
  },
  "r": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "r"
    ],
    "example": "print(\"Hello World\")"
  },
  "haskell": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "has"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "ocaml": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "oca"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "java": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nprintf(\"{}\\n\", {});",
      "assign": "// Assigns a value to a variable\nint {} = {};",
      "function": "// Defines a reusable block of code or routine\nvoid {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (int {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "jav"
    ],
    "example": "printf(\"\"{}\"\\n\", \"Hello World\");"
  },
  "factor": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "fac"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "slim": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "sli"
    ],
    "example": "print(\"Hello World\")"
  },
  "pl1": {
    "structure": {
      "print": "// Outputs text or value to console or output stream\nconsole.log({});",
      "assign": "// Assigns a value to a variable\nlet {} = {};",
      "function": "// Defines a reusable block of code or routine\nfunction {}({}) {{\n    {}\n}}",
      "loop": "// Iterates over a sequence or range\nfor (let {} = 0; {} < {}; {}++) {{\n    {}\n}}",
      "if": "// Performs conditional logic\nif ({}) {{\n    {}\n}}",
      "comment": "// Adds human-readable comments\n// {}",
      "return": "// Exits a function and optionally returns a value\nreturn {}",
      "import": "// Includes external libraries or modules\nimport {}",
      "switch": "// Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "// Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "// Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "// Adds human-readable comments\n// Exits the nearest enclosing loop\nbreak",
      "continue": "// Adds human-readable comments\n// Skips to the next iteration of a loop\ncontinue",
      "else": "// Adds human-readable comments\n// Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "// Adds human-readable comments\n// An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "// Adds human-readable comments\n// Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "// Adds human-readable comments\n// Raises an exception or error\nthrow new Error({})",
      "async": "// Adds human-readable comments\n// Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "// Adds human-readable comments\n// Pauses execution until a promise resolves\nawait {}",
      "yield": "// Adds human-readable comments\n// Pauses and returns from a generator\nyield {}",
      "operator": "// Adds human-readable comments\n// Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "// Adds human-readable comments\n// Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "// Adds human-readable comments\n// Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "pl1"
    ],
    "example": "console.log(\"Hello World\");"
  },
  "perl": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\nprint({})",
      "assign": "# Assigns a value to a variable\n{} = {}",
      "function": "# Defines a reusable block of code or routine\ndef {}({}):\n    {}",
      "loop": "# Iterates over a sequence or range\nfor {} in range({}):\n    {}",
      "if": "# Performs conditional logic\nif {}:\n    {}",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "per"
    ],
    "example": "print(\"Hello World\")"
  },
  "lisp": {
    "structure": {
      "print": "-- Outputs text or value to console or output stream\nputStrLn {}",
      "assign": "-- Assigns a value to a variable\n{} = {}",
      "function": "-- Defines a reusable block of code or routine\n{} {} =\n  {}",
      "loop": "-- Iterates over a sequence or range\n-- recursion required",
      "if": "-- Performs conditional logic\nif {} then\n  {}\nelse\n  ()",
      "comment": "-- Adds human-readable comments\n-- {}",
      "return": "-- Exits a function and optionally returns a value\nreturn {}",
      "import": "-- Includes external libraries or modules\nimport {}",
      "switch": "-- Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "-- Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "-- Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "-- Adds human-readable comments\n-- Exits the nearest enclosing loop\nbreak",
      "continue": "-- Adds human-readable comments\n-- Skips to the next iteration of a loop\ncontinue",
      "else": "-- Adds human-readable comments\n-- Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "-- Adds human-readable comments\n-- An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "-- Adds human-readable comments\n-- Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "-- Adds human-readable comments\n-- Raises an exception or error\nthrow new Error({})",
      "async": "-- Adds human-readable comments\n-- Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "-- Adds human-readable comments\n-- Pauses execution until a promise resolves\nawait {}",
      "yield": "-- Adds human-readable comments\n-- Pauses and returns from a generator\nyield {}",
      "operator": "-- Adds human-readable comments\n-- Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "-- Adds human-readable comments\n-- Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "-- Adds human-readable comments\n-- Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "lis"
    ],
    "example": "putStrLn \"Hello World\""
  },
  "awk": {
    "structure": {
      "print": "# Outputs text or value to console or output stream\necho {}",
      "assign": "# Assigns a value to a variable\n{}={}",
      "function": "# Defines a reusable block of code or routine\n{}() {{\n  {}\n}}",
      "loop": "# Iterates over a sequence or range\nfor {} in $(seq 1 {}); do\n  {}\ndone",
      "if": "# Performs conditional logic\nif [ {} ]; then\n  {}\nfi",
      "comment": "# Adds human-readable comments\n# {}",
      "return": "# Exits a function and optionally returns a value\nreturn {}",
      "import": "# Includes external libraries or modules\nimport {}",
      "switch": "# Handles multiple conditional branches\nswitch({}) {{\n    case ...\n}}",
      "class": "# Declares a class or object structure\nclass {} {{\n    constructor({}) {{\n        {}\n    }}\n}}",
      "try": "# Attempts an operation and handles exceptions\ntry {{\n    {}\n}} catch (e) {{\n    {}\n}}",
      "break": "# Adds human-readable comments\n# Exits the nearest enclosing loop\nbreak",
      "continue": "# Adds human-readable comments\n# Skips to the next iteration of a loop\ncontinue",
      "else": "# Adds human-readable comments\n# Fallback block when `if` condition fails\nelse {{\n    {}\n}}",
      "elif": "# Adds human-readable comments\n# An additional `if` condition after a failed one\nelse if ({}) {{\n    {}\n}}",
      "while": "# Adds human-readable comments\n# Executes a block as long as a condition is true\nwhile ({}) {{\n    {}\n}}",
      "throw": "# Adds human-readable comments\n# Raises an exception or error\nthrow new Error({})",
      "async": "# Adds human-readable comments\n# Declares an asynchronous function\nasync function {}({}) {{\n    {}\n}}",
      "await": "# Adds human-readable comments\n# Pauses execution until a promise resolves\nawait {}",
      "yield": "# Adds human-readable comments\n# Pauses and returns from a generator\nyield {}",
      "operator": "# Adds human-readable comments\n# Represents an arithmetic or logical operation\n{} + {}",
      "namespace": "# Adds human-readable comments\n# Defines a named scope for grouping code\nnamespace {} {{\n    {}\n}}",
      "main": "# Adds human-readable comments\n# Program entry point\nint main() {{\n    {}\n    return 0;\n}}"
    },
    "keywords": [],
    "file_extensions": [
      "awk"
    ],
    "example": "echo \"Hello World\""
  }
}